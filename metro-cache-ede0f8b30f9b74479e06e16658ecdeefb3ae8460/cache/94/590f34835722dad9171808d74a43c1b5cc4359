__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../node_modules/react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/girishrawat/Documents/dev/react-native-login-starter/components/Buttons.js";

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _propTypes = _require(_dependencyMap[3], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Buttons: {
      displayName: "Buttons"
    }
  };

  var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/girishrawat/Documents/dev/react-native-login-starter/components/Buttons.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var propTypes = {
    text: _propTypes2.default.string.isRequired,
    type: _propTypes2.default.string,
    shape: _propTypes2.default.string,
    textStyle: _reactNative.Text.propTypes.style,
    buttonStyle: _propTypes2.default.any,
    disabled: _propTypes2.default.bool,
    onPress: _propTypes2.default.func
  };
  var defaultProps = {
    text: 'hello',
    buttonStyle: {
      flexDirection: 'row',
      overflow: 'hidden',
      width: 250,
      height: 50,
      backgroundColor: 'grey',
      alignItems: 'center',
      justifyContent: 'center'
    }
  };

  var Buttons = _wrapComponent("Buttons")((_temp = _class = function (_React$Component) {
    _inherits(Buttons, _React$Component);

    function Buttons() {
      _classCallCheck(this, Buttons);

      return _possibleConstructorReturn(this, (Buttons.__proto__ || Object.getPrototypeOf(Buttons)).apply(this, arguments));
    }

    _createClass(Buttons, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            text = _props.text,
            buttonStyle = _props.buttonStyle,
            textStyle = _props.textStyle,
            type = _props.type,
            shape = _props.shape,
            onPress = _props.onPress;
        var shapeStyle = void 0;

        if (['round', 'circle'].includes(shape)) {
          shapeStyle = {
            borderRadius: 5
          };
        }

        var content = void 0;

        if (type === 'primary') {
          content = _react3.default.createElement(
            _reactNative.View,
            {
              style: [buttonStyle, shapeStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 42
              }
            },
            _react3.default.createElement(
              _reactNative.Text,
              {
                style: textStyle,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 47
                }
              },
              text
            )
          );
        } else if (type === 'gmail') {
          content = _react3.default.createElement(
            _reactNative.View,
            {
              style: [buttonStyle, shapeStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 53
              }
            },
            _react3.default.createElement(
              _reactNative.Text,
              {
                style: textStyle,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 59
                }
              },
              text
            )
          );
        }

        return _react3.default.createElement(
          _reactNative.TouchableOpacity,
          {
            shape: shape,
            onPress: onPress,
            type: type,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 64
            }
          },
          content
        );
      }
    }]);

    return Buttons;
  }(_react3.default.Component), _class.propTypes = propTypes, _class.defaultProps = defaultProps, _temp));

  exports.default = Buttons;
});